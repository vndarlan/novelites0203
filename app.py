# site agente novelties
import streamlit as st
import asyncio
import time
import os
import pandas as pd
from datetime import datetime
import tempfile
import json
import threading
import logging
import glob
import shutil
from typing import Dict, Any, Optional

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

logger.info("Iniciando app.py")

try:
    # Configura√ß√£o inicial do Streamlit
    st.set_page_config(
        page_title="Gerenciador de Agentes IA",
        page_icon="ü§ñ",
        layout="wide"
    )
    
    logger.info("Configura√ß√£o do Streamlit inicializada")
except Exception as e:
    logger.error(f"Erro ao configurar Streamlit: {e}")

# IMPORTANTE: bloco removido para evitar conflito com o healthcheck separado
# N√£o tente inicializar o healthcheck aqui, pois agora ele √© executado como processo separado

# Importa√ß√µes internas
try:
    logger.info("Importando m√≥dulos internos")
    from db.database import init_db, get_db_session
    from db.models import Task, TaskHistory, ApiKey
    from utils.agent_runner import run_agent_task
    from utils.helpers import format_datetime, get_status_color, generate_unique_id, get_llm_models
    from utils.sensitive_data import sensitive_data_manager
    from utils.controller import controller, ActionResult
    from utils.output_format import output_format_manager
    logger.info("M√≥dulos internos importados com sucesso")
except ImportError as e:
    logger.error(f"Erro ao importar m√≥dulos: {e}")
    st.error(f"Erro ao importar m√≥dulos: {e}")

def delete_task(task_id):
    """Deleta uma tarefa e seu hist√≥rico do banco de dados"""
    logger.info(f"Tentando deletar tarefa {task_id}")
    
    try:
        with get_db_session() as session:
            # Buscar a tarefa (o relacionamento em cascata ir√° excluir o hist√≥rico automaticamente)
            task = session.query(Task).filter(Task.id == task_id).first()
            
            if not task:
                logger.warning(f"Tarefa {task_id} n√£o encontrada para exclus√£o")
                return False, "Tarefa n√£o encontrada"
            
            # Excluir a tarefa
            session.delete(task)
            session.commit()
            
            # Tentar excluir screenshots e grava√ß√£o
            try:
                # Remover screenshots
                screenshot_pattern = f"static/screenshots/{task_id}_*.png"
                for screenshot in glob.glob(screenshot_pattern):
                    os.remove(screenshot)
                
                # Remover grava√ß√£o
                recording_path = f"static/recordings/{task_id}.webm"
                if os.path.exists(recording_path):
                    os.remove(recording_path)
            except Exception as e:
                logger.warning(f"Erro ao remover arquivos da tarefa {task_id}: {str(e)}")
            
            logger.info(f"Tarefa {task_id} deletada com sucesso")
            return True, "Tarefa deletada com sucesso"
    
    except Exception as e:
        logger.error(f"Erro ao deletar tarefa {task_id}: {str(e)}")
        return False, f"Erro ao deletar tarefa: {str(e)}"

# Inicializa√ß√£o de vari√°veis de sess√£o
def init_session_state():
    """Inicializa vari√°veis de estado da sess√£o"""
    try:
        logger.info("Inicializando estado da sess√£o")
        if 'db_initialized' not in st.session_state:
            st.session_state.db_initialized = False
        if 'current_task' not in st.session_state:
            st.session_state.current_task = None
        if 'llm_provider' not in st.session_state:
            st.session_state.llm_provider = "openai"
        if 'llm_model' not in st.session_state:
            st.session_state.llm_model = "gpt-4o"
        if 'browser_config' not in st.session_state:
            # Carregar config do banco de dados ou usar padr√£o
            st.session_state.browser_config = {
                'headless': False,  # Mudado para False para visualizar o navegador
                'disable_security': True,
                'browser_window_width': 1280,
                'browser_window_height': 1100,
                'highlight_elements': True,
                'chrome_instance_path': None,
                'wait_for_network_idle': 3.0,
                'minimum_wait_page_load_time': 0.5,
                'maximum_wait_page_load_time': 5.0,
                'max_steps': 15,
                'full_page_screenshot': False,
                'use_vision': True,
                'save_recording': True,
                'recording_path': 'static/recordings',
                'show_browser': True
            }
        if 'task_running' not in st.session_state:
            st.session_state.task_running = False
        if 'task_result' not in st.session_state:
            st.session_state.task_result = None
        if 'screenshot_index' not in st.session_state:
            st.session_state.screenshot_index = 0
        if 'confirm_delete_all' not in st.session_state:
            st.session_state.confirm_delete_all = False
        if 'delete_message' not in st.session_state:
            st.session_state.delete_message = None
        if 'sensitive_data_entries' not in st.session_state:
            st.session_state.sensitive_data_entries = [("x_username", ""), ("x_password", "")]
        if 'force_rerun_task' not in st.session_state:
            st.session_state.force_rerun_task = False
        logger.info("Estado da sess√£o inicializado com sucesso")
    except Exception as e:
        logger.error(f"Erro ao inicializar estado da sess√£o: {e}")

# Interface Streamlit
def auth_page():
    """P√°gina de configura√ß√£o das chaves de API"""
    try:
        logger.info("Carregando p√°gina de configura√ß√£o")
        st.title("üîê Configura√ß√£o das APIs")
        
        # Obter chaves atuais do banco de dados
        with get_db_session() as session:
            api_keys = {key.provider: key.api_key for key in session.query(ApiKey).all()}
            azure_endpoint = api_keys.get('azure_endpoint', '')
        
        tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
            "OpenAI", "Anthropic", "Azure OpenAI", "Gemini", "DeepSeek", "Ollama"
        ])
        
        with tab1:
            st.markdown("### Configura√ß√£o OpenAI")
            openai_api_key = st.text_input(
                "API Key OpenAI", 
                type="password", 
                value=api_keys.get('openai', '')
            )
            if st.button("Salvar Chave OpenAI"):
                with get_db_session() as session:
                    key = session.query(ApiKey).filter(ApiKey.provider == 'openai').first()
                    if key:
                        key.api_key = openai_api_key
                    else:
                        key = ApiKey(provider='openai', api_key=openai_api_key)
                        session.add(key)
                    session.commit()
                st.success("Chave API OpenAI salva com sucesso!")
        
        with tab2:
            st.markdown("### Configura√ß√£o Anthropic")
            anthropic_api_key = st.text_input(
                "API Key Anthropic", 
                type="password", 
                value=api_keys.get('anthropic', '')
            )
            if st.button("Salvar Chave Anthropic"):
                with get_db_session() as session:
                    key = session.query(ApiKey).filter(ApiKey.provider == 'anthropic').first()
                    if key:
                        key.api_key = anthropic_api_key
                    else:
                        key = ApiKey(provider='anthropic', api_key=anthropic_api_key)
                        session.add(key)
                    session.commit()
                st.success("Chave API Anthropic salva com sucesso!")
        
        with tab3:
            st.markdown("### Configura√ß√£o Azure OpenAI")
            azure_openai_endpoint = st.text_input(
                "Azure OpenAI Endpoint", 
                value=azure_endpoint
            )
            azure_openai_key = st.text_input(
                "Azure OpenAI Key", 
                type="password", 
                value=api_keys.get('azure', '')
            )
            if st.button("Salvar Configura√ß√£o Azure"):
                with get_db_session() as session:
                    # Salvar endpoint
                    endpoint_key = session.query(ApiKey).filter(ApiKey.provider == 'azure_endpoint').first()
                    if endpoint_key:
                        endpoint_key.api_key = azure_openai_endpoint
                    else:
                        endpoint_key = ApiKey(provider='azure_endpoint', api_key=azure_openai_endpoint)
                        session.add(endpoint_key)
                    
                    # Salvar chave
                    key = session.query(ApiKey).filter(ApiKey.provider == 'azure').first()
                    if key:
                        key.api_key = azure_openai_key
                    else:
                        key = ApiKey(provider='azure', api_key=azure_openai_key)
                        session.add(key)
                    
                    session.commit()
                st.success("Configura√ß√£o Azure OpenAI salva com sucesso!")
        
        with tab4:
            st.markdown("### Configura√ß√£o Gemini")
            gemini_api_key = st.text_input(
                "API Key Gemini", 
                type="password", 
                value=api_keys.get('gemini', '')
            )
            if st.button("Salvar Chave Gemini"):
                with get_db_session() as session:
                    key = session.query(ApiKey).filter(ApiKey.provider == 'gemini').first()
                    if key:
                        key.api_key = gemini_api_key
                    else:
                        key = ApiKey(provider='gemini', api_key=gemini_api_key)
                        session.add(key)
                    session.commit()
                st.success("Chave API Gemini salva com sucesso!")
        
        with tab5:
            st.markdown("### Configura√ß√£o DeepSeek")
            deepseek_api_key = st.text_input(
                "API Key DeepSeek", 
                type="password", 
                value=api_keys.get('deepseek', '')
            )
            if st.button("Salvar Chave DeepSeek"):
                with get_db_session() as session:
                    key = session.query(ApiKey).filter(ApiKey.provider == 'deepseek').first()
                    if key:
                        key.api_key = deepseek_api_key
                    else:
                        key = ApiKey(provider='deepseek', api_key=deepseek_api_key)
                        session.add(key)
                    session.commit()
                st.success("Chave API DeepSeek salva com sucesso!")
        
        with tab6:
            st.markdown("### Configura√ß√£o Ollama")
            st.info("Ollama √© executado localmente e n√£o requer chave API. Certifique-se de que o Ollama esteja instalado e em execu√ß√£o no servidor.")
        
        st.divider()
        
        st.markdown("### Configura√ß√£o do Navegador")
        col1, col2 = st.columns(2)
        
        with col1:
            headless = st.checkbox(
                "Modo Headless (sem interface visual)", 
                value=st.session_state.browser_config['headless']
            )
            disable_security = st.checkbox(
                "Desativar seguran√ßa do navegador", 
                value=st.session_state.browser_config['disable_security'],
                help="Desativa recursos de seguran√ßa do navegador, √∫til para algumas automa√ß√µes, mas use com cautela."
            )
            highlight_elements = st.checkbox(
                "Destacar elementos interativos", 
                value=st.session_state.browser_config['highlight_elements'],
                help="Destacar elementos interativos na p√°gina com caixas coloridas."
            )
        
        with col2:
            browser_window_width = st.number_input(
                "Largura da janela do navegador", 
                min_value=800, 
                max_value=2560, 
                value=st.session_state.browser_config['browser_window_width']
            )
            browser_window_height = st.number_input(
                "Altura da janela do navegador", 
                min_value=600, 
                max_value=2160, 
                value=st.session_state.browser_config['browser_window_height']
            )
        
        if st.button("Salvar Configura√ß√µes do Navegador"):
            # Atualizar sess√£o
            browser_config = {
                'headless': headless,
                'disable_security': disable_security,
                'browser_window_width': browser_window_width,
                'browser_window_height': browser_window_height,
                'highlight_elements': highlight_elements,
                'chrome_instance_path': st.session_state.browser_config.get('chrome_instance_path'),
                'wait_for_network_idle': 3.0,
                'minimum_wait_page_load_time': 0.5,
                'maximum_wait_page_load_time': 5.0,
                'max_steps': 15,
                'full_page_screenshot': False,
                'use_vision': True,
                'save_recording': True,
                'recording_path': 'static/recordings',
                'show_browser': not headless
            }
            st.session_state.browser_config = browser_config
            
            # Salvar no banco de dados como JSON
            with get_db_session() as session:
                key = session.query(ApiKey).filter(ApiKey.provider == 'browser_config').first()
                if key:
                    key.api_key = json.dumps(browser_config)
                else:
                    key = ApiKey(provider='browser_config', api_key=json.dumps(browser_config))
                    session.add(key)
                session.commit()
            
            st.success("Configura√ß√µes do navegador salvas com sucesso!")
        logger.info("P√°gina de configura√ß√£o carregada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao carregar p√°gina de configura√ß√£o: {e}")
        st.error(f"Erro ao carregar p√°gina de configura√ß√£o: {e}")

def create_task_page():
    """P√°gina para criar novas tarefas"""
    try:
        logger.info("Carregando p√°gina de cria√ß√£o de tarefas")
        st.title("üöÄ Criar Nova Tarefa")
        
        # Obter chaves do banco de dados
        with get_db_session() as session:
            api_keys = {key.provider: key.api_key for key in session.query(ApiKey).all()}
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            task_instructions = st.text_area(
                "Instru√ß√µes para o Agente", 
                height=200, 
                placeholder="Digite instru√ß√µes detalhadas para o agente de IA...\n\nExemplo: Abra https://www.google.com e pesquise por 'Browser Use'"
            )
            
            # Sele√ß√£o de LLM
            model_col1, model_col2 = st.columns(2)
            
            with model_col1:
                llm_provider = st.selectbox(
                    "Provedor de LLM",
                    options=["openai", "anthropic", "azure", "gemini", "deepseek", "ollama"],
                    index=["openai", "anthropic", "azure", "gemini", "deepseek", "ollama"].index(st.session_state.llm_provider),
                    format_func=lambda x: {
                        'openai': 'OpenAI',
                        'anthropic': 'Anthropic',
                        'azure': 'Azure OpenAI',
                        'gemini': 'Google Gemini',
                        'deepseek': 'DeepSeek',
                        'ollama': 'Ollama (Local)'
                    }.get(x, x)
                )
                st.session_state.llm_provider = llm_provider
            
            with model_col2:
                models = get_llm_models(llm_provider)
                selected_model = st.selectbox(
                    "Modelo",
                    options=models,
                    index=0 if st.session_state.llm_model not in models else models.index(st.session_state.llm_model)
                )
                st.session_state.llm_model = selected_model
            
            # Op√ß√µes avan√ßadas do navegador
            with st.expander("üîß Op√ß√µes avan√ßadas do navegador"):
                col1, col2 = st.columns(2)
                
                with col1:
                    show_browser = st.checkbox(
                        "Mostrar navegador durante execu√ß√£o", 
                        value=st.session_state.browser_config.get('show_browser', True),
                        help="Se marcado, voc√™ ver√° o navegador em tempo real durante a execu√ß√£o da tarefa."
                    )
                    
                    headless = not show_browser  # Inverso do show_browser
                    
                    save_recording = st.checkbox(
                        "Salvar grava√ß√£o da execu√ß√£o", 
                        value=st.session_state.browser_config.get('save_recording', True),
                        help="Se marcado, uma grava√ß√£o da execu√ß√£o ser√° salva e poder√° ser visualizada depois."
                    )
                
                with col2:
                    max_steps = st.number_input(
                        "N√∫mero m√°ximo de passos", 
                        min_value=5, 
                        max_value=50, 
                        value=st.session_state.browser_config.get('max_steps', 15),
                        help="Limita o n√∫mero m√°ximo de a√ß√µes que o agente pode executar."
                    )
                    
                    highlight_elements = st.checkbox(
                        "Destacar elementos interativos", 
                        value=st.session_state.browser_config.get('highlight_elements', True),
                        help="Destaca elementos quando o agente interage com eles."
                    )
                
                # Atualizar configura√ß√£o do navegador
                browser_config = st.session_state.browser_config.copy()
                browser_config.update({
                    'headless': headless,
                    'show_browser': show_browser,
                    'save_recording': save_recording,
                    'max_steps': max_steps,
                    'highlight_elements': highlight_elements,
                    'recording_path': 'static/recordings'
                })
                
                # Atualizar sess√£o apenas quando necess√°rio
                if browser_config != st.session_state.browser_config:
                    st.session_state.browser_config = browser_config

            # Dados sens√≠veis
            with st.expander("üîí Dados Sens√≠veis"):
                st.markdown("""
                Adicione dados sens√≠veis que o agente pode precisar usar (como senhas, tokens, etc).
                O agente ver√° apenas os nomes dos placeholders, n√£o os valores reais.
                """)
                
                # Fun√ß√£o para adicionar nova entrada
                def add_sensitive_entry():
                    st.session_state.sensitive_data_entries.append((f"x_data_{len(st.session_state.sensitive_data_entries)+1}", ""))
                
                # Fun√ß√£o para remover entrada
                def remove_sensitive_entry(index):
                    st.session_state.sensitive_data_entries.pop(index)
                
                # Mostrar entradas existentes
                for i, (placeholder, value) in enumerate(st.session_state.sensitive_data_entries):
                    col1, col2, col3 = st.columns([2, 3, 1])
                    with col1:
                        new_placeholder = st.text_input(f"Nome do placeholder {i+1}", placeholder, key=f"placeholder_{i}")
                    with col2:
                        new_value = st.text_input(f"Valor sens√≠vel {i+1}", value, type="password", key=f"value_{i}")
                    with col3:
                        if st.button("üóëÔ∏è", key=f"delete_{i}"):
                            remove_sensitive_entry(i)
                            st.experimental_rerun()
                    
                    # Atualizar valores
                    st.session_state.sensitive_data_entries[i] = (new_placeholder, new_value)
                
                # Bot√£o para adicionar nova entrada
                if st.button("‚ûï Adicionar Dado Sens√≠vel"):
                    add_sensitive_entry()
                    st.experimental_rerun()
                
                # Converter entradas para dicion√°rio
                sensitive_data = {
                    placeholder: value 
                    for placeholder, value in st.session_state.sensitive_data_entries 
                    if placeholder and value
                }
                
                # Mostrar como usar na tarefa
                if sensitive_data:
                    st.markdown("### Como usar na tarefa:")
                    examples = []
                    for placeholder in sensitive_data.keys():
                        examples.append(f"- Use **{placeholder}** para o valor sens√≠vel (ex: 'Fa√ßa login com {placeholder}')")
                    st.markdown("\n".join(examples))
                    
            # Verificar se a chave API est√° configurada
            api_key = api_keys.get(llm_provider, '')
            azure_endpoint = api_keys.get('azure_endpoint', '')
            
            # Verificar se as chaves necess√°rias est√£o configuradas
            api_configured = True
            if llm_provider == 'azure' and (not api_key or not azure_endpoint):
                st.error("Azure OpenAI requer configura√ß√£o de endpoint e chave API. Configure-os na aba Configura√ß√£o.")
                api_configured = False
            elif llm_provider != 'ollama' and not api_key:
                st.error(f"Chave API para {llm_provider} n√£o configurada. Configure-a na aba Configura√ß√£o.")
                api_configured = False
            
            # Bot√£o para iniciar a tarefa
            if st.button("Iniciar Tarefa", type="primary", use_container_width=True, disabled=not api_configured):
                if not task_instructions.strip():
                    st.error("As instru√ß√µes n√£o podem estar vazias.")
                else:
                    # Gerar ID √∫nico para a tarefa
                    task_id = generate_unique_id()
                    
                    # Criar objeto da tarefa no banco de dados
                    with get_db_session() as session:
                        new_task = Task(
                            id=task_id,
                            task=task_instructions,
                            status='created',
                            created_at=datetime.now(),
                            llm_provider=llm_provider,
                            llm_model=selected_model
                        )
                        session.add(new_task)
                        session.commit()
                    
                    st.session_state.current_task = task_id
                    st.success(f"Tarefa criada! ID: {task_id}")
                    
                    # Redirecionar para p√°gina de detalhes
                    time.sleep(1)
                    st.experimental_rerun()
        
        with col2:
            # Dicas
            st.markdown("### Dicas")
            st.info(
                "üìù Seja espec√≠fico nas instru√ß√µes\n\n"
                "üåê Inclua URLs completas\n\n"
                "üîç Descreva cada etapa que deseja que o agente execute"
            )
            
            # Configura√ß√µes do navegador atual
            st.markdown("### Configura√ß√£o do Navegador")
            
            # Mostrar configura√ß√µes atuais
            config_items = [
                f"üìê Dimens√µes: {st.session_state.browser_config['browser_window_width']}x{st.session_state.browser_config['browser_window_height']}",
                f"üëÅÔ∏è Headless: {'Sim' if st.session_state.browser_config['headless'] else 'N√£o'}",
                f"üõ°Ô∏è Seguran√ßa desativada: {'Sim' if st.session_state.browser_config['disable_security'] else 'N√£o'}",
                f"üîÜ Destacar elementos: {'Sim' if st.session_state.browser_config['highlight_elements'] else 'N√£o'}"
            ]
            
            for item in config_items:
                st.markdown(item)
            
            if st.button("Editar Configura√ß√£o"):
                st.switch_page("app.py")  # Volta para a p√°gina de configura√ß√£o
        logger.info("P√°gina de cria√ß√£o de tarefas carregada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao carregar p√°gina de cria√ß√£o de tarefas: {e}")
        st.error(f"Erro ao carregar p√°gina de cria√ß√£o de tarefas: {e}")

def task_list_page():
    """P√°gina que lista todas as tarefas com op√ß√£o de exclus√£o"""
    try:
        logger.info("Carregando p√°gina de lista de tarefas")
        st.title("üìã Minhas Tarefas")
        
        # Verificar se h√° mensagem de confirma√ß√£o para exibir
        if 'delete_message' in st.session_state:
            message_type, message = st.session_state.delete_message
            if message_type:
                st.success(message)
            else:
                st.error(message)
            # Limpar a mensagem ap√≥s exibir
            del st.session_state.delete_message
        
        try:
            # Obter tarefas do banco de dados
            with get_db_session() as session:
                # Converter as tarefas do SQLAlchemy para dicion√°rios enquanto a sess√£o est√° aberta
                task_dicts = []
                for task in session.query(Task).order_by(Task.created_at.desc()).all():
                    task_dicts.append({
                        "id": task.id,
                        "task": task.task,
                        "status": task.status,
                        "llm_provider": task.llm_provider,
                        "llm_model": task.llm_model,
                        "created_at": task.created_at,
                        "finished_at": task.finished_at
                    })
            
            # Verificar se existem tarefas
            if not task_dicts:
                st.info("Voc√™ ainda n√£o possui tarefas. Crie uma nova na aba 'Criar Tarefa'.")
                return
            
            # Bot√£o para deletar todas as tarefas
            if st.button("üóëÔ∏è Deletar Todas as Tarefas", type="secondary"):
                st.session_state.confirm_delete_all = True
                
            # Confirma√ß√£o para deletar todas
            if st.session_state.get('confirm_delete_all', False):
                st.warning("‚ö†Ô∏è Tem certeza que deseja deletar TODAS as tarefas? Esta a√ß√£o n√£o pode ser desfeita!")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ Sim, deletar tudo"):
                        success_count = 0
                        total_tasks = len(task_dicts)
                        
                        for task in task_dicts:
                            success, _ = delete_task(task["id"])
                            if success:
                                success_count += 1
                        
                        if success_count == total_tasks:
                            st.session_state.delete_message = (True, f"Todas as {total_tasks} tarefas foram deletadas com sucesso!")
                        else:
                            st.session_state.delete_message = (False, f"Foram deletadas {success_count} de {total_tasks} tarefas.")
                        
                        st.session_state.confirm_delete_all = False
                        st.experimental_rerun()
                
                with col2:
                    if st.button("‚ùå Cancelar"):
                        st.session_state.confirm_delete_all = False
                        st.experimental_rerun()
            
            # Exibir lista de tarefas
            st.write("### Lista de Tarefas")
            
            for i, task in enumerate(task_dicts):
                task_id = task["id"]
                task_desc = task["task"][:50] + "..." if len(task["task"]) > 50 else task["task"]
                task_status = task["status"]
                task_date = format_datetime(task["created_at"])
                
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.write(f"**{i+1}. {task_desc}** (ID: `{task_id}`)")
                    st.write(f"Status: {task_status} | Criado: {task_date}")
                with col2:
                    if st.button(f"üëÅÔ∏è Ver Detalhes", key=f"view_{task_id}"):
                        st.session_state.current_task = task_id
                        st.experimental_rerun()
                with col3:
                    if st.button(f"üóëÔ∏è Deletar", key=f"delete_{task_id}"):
                        st.session_state[f"confirm_delete_{task_id}"] = True
                
                # Mostrar confirma√ß√£o de exclus√£o se necess√°rio
                if st.session_state.get(f"confirm_delete_{task_id}", False):
                    st.warning(f"‚ö†Ô∏è Tem certeza que deseja deletar esta tarefa? Esta a√ß√£o n√£o pode ser desfeita!")
                    confirm_col1, confirm_col2 = st.columns(2)
                    with confirm_col1:
                        if st.button(f"‚úÖ Sim", key=f"confirm_yes_{task_id}"):
                            success, message = delete_task(task_id)
                            st.session_state.delete_message = (success, message)
                            del st.session_state[f"confirm_delete_{task_id}"]
                            st.experimental_rerun()
                    with confirm_col2:
                        if st.button(f"‚ùå N√£o", key=f"confirm_no_{task_id}"):
                            del st.session_state[f"confirm_delete_{task_id}"]
                            st.experimental_rerun()
                
                st.markdown("---")
        
        except Exception as e:
            st.error(f"Ocorreu um erro ao carregar as tarefas: {str(e)}")
            st.code(str(e))
        logger.info("P√°gina de lista de tarefas carregada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao carregar p√°gina de lista de tarefas: {e}")
        st.error(f"Erro ao carregar p√°gina de lista de tarefas: {e}")

def execute_task_thread(task_id):
    """Executa uma tarefa em uma thread separada"""
    logger.info(f"Iniciando thread para executar tarefa {task_id}")
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        result = loop.run_until_complete(execute_task_async(task_id))
        st.session_state.task_result = result
        logger.info(f"Tarefa {task_id} executada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao executar tarefa {task_id}: {e}")
        st.session_state.task_result = {"error": str(e)}
    finally:
        st.session_state.task_running = False
        loop.close()

async def execute_task_async(task_id):
    """Executa uma tarefa espec√≠fica assincronamente"""
    logger.info(f"Executando tarefa {task_id} assincronamente")
    
    # Antes de iniciar qualquer coisa, verificar se a tarefa existe e o status atual
    with get_db_session() as session:
        task = session.query(Task).filter(Task.id == task_id).first()
        
        if not task:
            logger.error(f"Tarefa {task_id} n√£o encontrada")
            return {"error": "Tarefa n√£o encontrada"}
        
        # Se a tarefa j√° estiver em execu√ß√£o, finalizada ou falha, verificar tempo
        if task.status in ['running', 'finished', 'failed']:
            # Verificar se est√° em "running" por mais de 30 minutos - prov√°vel travamento
            if task.status == 'running' and task.created_at:
                time_diff = datetime.now() - task.created_at
                
                # Se passaram mais de 30 minutos, podemos assumir que houve um problema
                if time_diff.total_seconds() > 1800:  # 30 minutos em segundos
                    logger.warning(f"Tarefa {task_id} est√° em execu√ß√£o por mais de 30 minutos. Resetando status.")
                    task.status = 'created'  # Reset para permitir nova execu√ß√£o
                    session.commit()
                else:
                    # Est√° em execu√ß√£o por um tempo razo√°vel, n√£o devemos executar novamente
                    logger.warning(f"Tarefa {task_id} j√° est√° em execu√ß√£o.")
                    return {"error": "Tarefa j√° est√° em execu√ß√£o"}
            elif task.status in ['finished', 'failed']:
                # Verificar se o usu√°rio quer reexecutar explicitamente
                if not st.session_state.get('force_rerun_task', False):
                    logger.info(f"Tarefa {task_id} j√° foi executada com status {task.status}.")
                    return {"error": f"Tarefa j√° foi executada com status {task.status}. Use 'Executar Novamente' para for√ßar reexecu√ß√£o."}
    
    # Atualizar status para 'running'
    with get_db_session() as session:
        task = session.query(Task).filter(Task.id == task_id).first()
        task.status = 'running'
        session.commit()
    
    # Preparar API Key para o modelo selecionado
    with get_db_session() as session:
        api_keys = {key.provider: key.api_key for key in session.query(ApiKey).all()}
        
    if task.llm_provider == 'azure':
        api_key = api_keys.get('azure', '')
        endpoint = api_keys.get('azure_endpoint', '')
        llm_info = {
            'provider': task.llm_provider,
            'model': task.llm_model,
            'api_key': api_key,
            'endpoint': endpoint
        }
    else:
        api_key = api_keys.get(task.llm_provider, '')
        llm_info = {
            'provider': task.llm_provider,
            'model': task.llm_model,
            'api_key': api_key
        }
    
    # Obter dados sens√≠veis da sess√£o
    sensitive_data = {}
    if 'sensitive_data_entries' in st.session_state:
        sensitive_data = {
            placeholder: value 
            for placeholder, value in st.session_state.sensitive_data_entries 
            if placeholder and value
        }
    
    try:
        logger.info(f"Executando agente para tarefa {task_id}")
        # Executar o agente
        result = await run_agent_task(
            task_id=task_id,
            task_instructions=task.task,
            llm=llm_info,
            browser_config=st.session_state.browser_config,
            sensitive_data=sensitive_data
        )
        
        # Atualizar o status da tarefa no banco de dados
        with get_db_session() as session:
            task = session.query(Task).filter(Task.id == task_id).first()
            
            if not task:
                logger.error(f"Tarefa {task_id} n√£o encontrada ap√≥s execu√ß√£o")
                return {"error": "Tarefa n√£o encontrada ap√≥s execu√ß√£o"}
                
            # Definir status correto
            task.status = result.get('status', 'unknown')
            if task.status not in ['created', 'running', 'finished', 'failed']:
                task.status = 'finished' if not result.get('errors') else 'failed'
                
            task.finished_at = datetime.now()
            task.output = result.get('output', '')
            
            # Criar ou atualizar o hist√≥rico da tarefa
            task_history = session.query(TaskHistory).filter(TaskHistory.task_id == task_id).first()
            
            if task_history:
                task_history.steps = json.dumps(result.get('steps', []))
                task_history.urls = json.dumps(result.get('urls', []))
                task_history.screenshots = json.dumps(result.get('screenshots', []))
                task_history.errors = json.dumps(result.get('errors', []))
            else:
                task_history = TaskHistory(
                    task_id=task_id,
                    steps=json.dumps(result.get('steps', [])),
                    urls=json.dumps(result.get('urls', [])),
                    screenshots=json.dumps(result.get('screenshots', [])),
                    errors=json.dumps(result.get('errors', []))
                )
                session.add(task_history)
            
            # Calcular dura√ß√£o total
            if task.created_at and task.finished_at:
                duration_seconds = (task.finished_at - task.created_at).total_seconds()
                task_history.duration = str(int(duration_seconds))
            
            session.commit()
        
        # Limpar flag de reexecu√ß√£o for√ßada se existir
        if 'force_rerun_task' in st.session_state:
            del st.session_state['force_rerun_task']
        
        logger.info(f"Tarefa {task_id} conclu√≠da com status: {result.get('status', 'unknown')}")
        return result
        
    except Exception as e:
        logger.error(f"Erro durante execu√ß√£o da tarefa {task_id}: {str(e)}")
        
        # Atualizar status para falha em caso de exce√ß√£o
        with get_db_session() as session:
            task = session.query(Task).filter(Task.id == task_id).first()
            if task:
                task.status = 'failed'
                task.finished_at = datetime.now()
                task.output = f"Erro na execu√ß√£o: {str(e)}"
                session.commit()
        
        return {
            "status": "failed",
            "error": str(e),
            "errors": [str(e)]
        }

def task_detail_page():
    """P√°gina de detalhes da tarefa atual"""
    try:
        logger.info("Carregando p√°gina de detalhes da tarefa")
        if not st.session_state.current_task:
            st.error("Nenhuma tarefa selecionada.")
            return
        
        task_id = st.session_state.current_task
        
        # Obter tarefa e hist√≥rico do banco de dados
        with get_db_session() as session:
            task = session.query(Task).filter(Task.id == task_id).first()
            
            if not task:
                st.error(f"Tarefa {task_id} n√£o encontrada.")
                if st.button("Voltar √† lista de tarefas"):
                    st.session_state.current_task = None
                    st.experimental_rerun()
                return
            
            # Armazenar os atributos que precisamos enquanto a sess√£o est√° aberta
            task_data = {
                'id': task.id,
                'status': task.status,
                'created_at': task.created_at,
                'finished_at': task.finished_at,
                'llm_provider': task.llm_provider,
                'llm_model': task.llm_model,
                'task': task.task,
                'output': task.output
            }
            
            # Obter o hist√≥rico da tarefa
            task_history = session.query(TaskHistory).filter(TaskHistory.task_id == task_id).first()
            history_data = None
            if task_history:
                history_data = {
                    'steps': task_history.steps,
                    'urls': task_history.urls,
                    'screenshots': task_history.screenshots,
                    'errors': task_history.errors
                }
        
        # Exibir cabe√ßalho
        status = task_data['status']
        status_color = get_status_color(status)
        
        st.title(f"üìä Detalhes da Tarefa")
        st.markdown(f"**ID da Tarefa:** `{task_id}`")
        
        # Barra de status e controles
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.markdown(f"**Status:** <span style='color:{status_color};font-weight:bold;'>{status.upper()}</span>", unsafe_allow_html=True)
        
        # Controles conforme o status
        with col2:
            if status == 'running':
                st.info("Tarefa em execu√ß√£o. Aguarde a conclus√£o ou atualize a p√°gina para ver o progresso.")
                if st.button("üîÑ Atualizar Status", key="refresh_status"):
                    st.experimental_rerun()
            elif status == 'created':
                run_col1, run_col2 = st.columns(2)
                with run_col1:
                    if st.button("‚ñ∂Ô∏è Executar Tarefa", key="run_task", use_container_width=True):
                        if not st.session_state.task_running:
                            st.session_state.task_running = True
                            logger.info(f"Iniciando execu√ß√£o da tarefa {task_id}")
                            # Iniciar thread para executar a tarefa
                            thread = threading.Thread(target=execute_task_thread, args=(task_id,))
                            thread.daemon = True
                            thread.start()
                            st.info("Iniciando execu√ß√£o da tarefa...")
                            st.experimental_rerun()
                with run_col2:
                    headless = st.checkbox("Executar em modo headless", value=st.session_state.browser_config.get('headless', False),
                                    help="Se marcado, o navegador n√£o ser√° vis√≠vel durante a execu√ß√£o")
                    if headless != st.session_state.browser_config.get('headless', False):
                        # Atualizar configura√ß√£o
                        browser_config = st.session_state.browser_config.copy()
                        browser_config['headless'] = headless
                        browser_config['show_browser'] = not headless
                        st.session_state.browser_config = browser_config
            elif status in ['finished', 'failed']:
                if st.button("üîÑ Executar Novamente", key="rerun_task", use_container_width=True):
                    st.session_state['force_rerun_task'] = True
                    if not st.session_state.task_running:
                        st.session_state.task_running = True
                        logger.info(f"Reexecutando tarefa {task_id}")
                        # Iniciar thread para executar a tarefa
                        thread = threading.Thread(target=execute_task_thread, args=(task_id,))
                        thread.daemon = True
                        thread.start()
                        st.info("Reiniciando execu√ß√£o da tarefa...")
                        st.experimental_rerun()
        
        # Detalhes da tarefa
        st.markdown("### Informa√ß√µes da Tarefa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**Criada em:** {format_datetime(task_data['created_at'])}")
            if task_data['finished_at']:
                st.markdown(f"**Conclu√≠da em:** {format_datetime(task_data['finished_at'])}")
            st.markdown(f"**Modelo:** {task_data['llm_provider']} / {task_data['llm_model']}")
        
        # Instru√ß√µes
        st.markdown("### Instru√ß√µes")
        st.code(task_data['task'])
        
        # Se a tarefa estiver em execu√ß√£o, mostrar informa√ß√µes de progresso
        if st.session_state.task_running:
            st.info("A tarefa est√° sendo executada em segundo plano... Isso pode levar alguns minutos.")
            progress_placeholder = st.empty()
            
            # Verificar estado atual
            with get_db_session() as session:
                current_task = session.query(Task).filter(Task.id == task_id).first()
                current_status = current_task.status if current_task else "unknown"
                
                # Verificar hist√≥rico para obter informa√ß√µes atuais
                task_history = session.query(TaskHistory).filter(TaskHistory.task_id == task_id).first()
                if task_history:
                    steps = json.loads(task_history.steps) if task_history.steps else []
                    urls = json.loads(task_history.urls) if task_history.urls else []
                    screenshots = json.loads(task_history.screenshots) if task_history.screenshots else []
                    
                    # Mostrar progresso atual
                    with progress_placeholder.container():
                        st.write(f"Status atual: **{current_status}**")
                        st.write(f"Passos executados: **{len(steps)}**")
                        st.write(f"URLs visitadas: **{len(urls)}**")
                        
                        # Mostrar √∫ltimo screenshot se dispon√≠vel
                        if screenshots:
                            last_screenshot = screenshots[-1]
                            if os.path.exists(last_screenshot):
                                st.image(last_screenshot, caption="√öltima captura de tela")
            
            if st.button("Atualizar Progresso"):
                st.experimental_rerun()
        
        # Se o resultado da tarefa estiver dispon√≠vel na sess√£o, exibi-lo
        if st.session_state.task_result and not st.session_state.task_running:
            st.success("Tarefa conclu√≠da!")
            # Limpar resultado ap√≥s exibir
            st.session_state.task_result = None
            # Recarregar a p√°gina para mostrar os dados atualizados do banco
            st.experimental_rerun()
        
        # Se o status for 'created' e a tarefa n√£o estiver em execu√ß√£o, propor execu√ß√£o
        if status == 'created' and not st.session_state.task_running:
            st.info("Esta tarefa est√° aguardando execu√ß√£o. Clique em 'Executar Tarefa' para inici√°-la.")
        
        # Verificar se h√° grava√ß√£o para esta tarefa
        recording_path = os.path.join(st.session_state.browser_config.get('recording_path', 'static/recordings'), f"{task_id}.webm")
        if os.path.exists(recording_path):
            st.markdown("### üé¨ Grava√ß√£o da Execu√ß√£o")
            st.video(recording_path)
        
        # Exibir resultados se a tarefa estiver conclu√≠da e houver dados no hist√≥rico
        if history_data and status in ['finished', 'failed']:
            # Desserializar os dados do hist√≥rico
            steps = json.loads(history_data['steps']) if history_data['steps'] else []
            urls = json.loads(history_data['urls']) if history_data['urls'] else []
            screenshots = json.loads(history_data['screenshots']) if history_data['screenshots'] else []
            errors = json.loads(history_data['errors']) if history_data['errors'] else []
            
            # Mostrar passos da execu√ß√£o
            if steps:
                st.markdown("### Passos da Execu√ß√£o")
                
                for i, step in enumerate(steps):
                    with st.expander(f"Passo {step.get('step', i+1)}"):
                        if 'evaluation_previous_goal' in step and step['evaluation_previous_goal']:
                            st.markdown("**Pensamento:**")
                            st.info(step['evaluation_previous_goal'])
                        
                        if 'next_goal' in step and step['next_goal']:
                            st.markdown("**A√ß√£o:**")
                            st.success(step['next_goal'])
            
            # Mostrar URLs visitadas
            if urls:
                st.markdown("### URLs Visitadas")
                for url in urls:
                    st.markdown(f"- {url}")
            
            # Mostrar screenshots se dispon√≠veis e n√£o existir grava√ß√£o
            if screenshots and not os.path.exists(recording_path):
                st.markdown("### üì∏ Capturas de Tela")
                
                # Exibir slideshow com os screenshots
                screenshot_index = st.session_state.get('screenshot_index', 0)
                total_screenshots = len(screenshots)
                
                if total_screenshots > 0:
                    # Navega√ß√£o do slideshow
                    col1, col2, col3 = st.columns([1, 10, 1])
                    
                    with col1:
                        if st.button("‚óÄÔ∏è", key="prev_screenshot", disabled=screenshot_index <= 0):
                            st.session_state.screenshot_index = max(0, screenshot_index - 1)
                            st.experimental_rerun()
                    
                    with col2:
                        # Exibir screenshot atual
                        if 0 <= screenshot_index < total_screenshots:
                            current_screenshot = screenshots[screenshot_index]
                            if os.path.exists(current_screenshot):
                                st.image(current_screenshot, caption=f"Captura {screenshot_index + 1} de {total_screenshots}")
                            else:
                                st.warning(f"Imagem n√£o encontrada: {current_screenshot}")
                    
                    with col3:
                        if st.button("‚ñ∂Ô∏è", key="next_screenshot", disabled=screenshot_index >= total_screenshots - 1):
                            st.session_state.screenshot_index = min(total_screenshots - 1, screenshot_index + 1)
                            st.experimental_rerun()
            
            # Mostrar resultado final
            if task_data['output']:
                st.markdown("### Resultado Final")
                st.code(task_data['output'])
            
            # Mostrar erros se houver
            if errors:
                st.markdown("### Erros")
                for error in errors:
                    st.error(error)
        
        # Bot√£o para voltar √† lista
        if st.button("‚Üê Voltar √† lista de tarefas", key="back_to_list"):
            st.session_state.current_task = None
            st.experimental_rerun()
        logger.info("P√°gina de detalhes da tarefa carregada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao carregar p√°gina de detalhes da tarefa: {e}")
        st.error(f"Erro ao carregar p√°gina de detalhes da tarefa: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        logger.info("Iniciando fun√ß√£o principal")
        # Inicializar banco de dados se necess√°rio
        if not st.session_state.get('db_initialized', False):
            try:
                logger.info("Inicializando banco de dados...")
                init_db()
                logger.info("Banco de dados inicializado com sucesso")
                
                # Carregar configura√ß√µes do navegador do banco de dados
                with get_db_session() as session:
                    browser_config = session.query(ApiKey).filter(ApiKey.provider == 'browser_config').first()
                    if browser_config and browser_config.api_key:
                        try:
                            st.session_state.browser_config = json.loads(browser_config.api_key)
                            logger.info("Configura√ß√µes do navegador carregadas do banco de dados")
                        except Exception as e:
                            logger.error(f"Erro ao carregar configura√ß√µes do navegador: {e}")
                
                st.session_state.db_initialized = True
                logger.info("Inicializa√ß√£o conclu√≠da")
            except Exception as e:
                logger.error(f"Erro ao inicializar banco de dados: {e}")
        
        # Inicializar estado da sess√£o
        init_session_state()
        
        # Sidebar - vers√£o mais simples para evitar problemas de renderiza√ß√£o
        with st.sidebar:
            st.title("ü§ñ Gerenciador de Agentes IA")
            
            # Menu simplificado
            nav_options = ["Configura√ß√£o", "Criar Tarefa", "Minhas Tarefas"]
            if st.session_state.current_task:
                nav_options.append("Detalhes da Tarefa")
                
            nav_option = st.radio(
                "Navega√ß√£o",
                options=nav_options,
                index=0
            )
        
        # Conte√∫do principal
        if nav_option == "Configura√ß√£o":
            auth_page()
        elif nav_option == "Detalhes da Tarefa" and st.session_state.current_task:
            task_detail_page()
        elif nav_option == "Minhas Tarefas":
            task_list_page()
        else:
            create_task_page()
        
        logger.info("Fun√ß√£o principal executada com sucesso")
    except Exception as e:
        logger.error(f"Erro na fun√ß√£o principal: {e}")
        st.error(f"Ocorreu um erro: {e}")

if __name__ == "__main__":
    try:
        logger.info("Iniciando a aplica√ß√£o")
        main()
        logger.info("Aplica√ß√£o iniciada com sucesso")
    except Exception as e:
        logger.error(f"Erro ao iniciar a aplica√ß√£o: {e}")